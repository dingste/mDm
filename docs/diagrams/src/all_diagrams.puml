@startuml "Direct Reference"
!theme plain
title Direkte Referenzierung mit dNibs

class DirectReference {
    +dNib metadata
    +data content
}

note right of DirectReference : Direkte Referenzierung\nspeichert Daten neben dem dNib.

DirectReference : metadata = "Typinformation"
DirectReference : content = "Daten (28 Bit)"

@enduml

@startuml "Indirect Reference - List"
!theme plain
title Indirekte Referenzierung (Liste) mit dNibs

class IndirectReference {
    +dNib listPointer
    +list<Address> addresses
}

class Address {
    +dNib metadata
    +data content
}

IndirectReference --> Address : enthält

note right of IndirectReference : Indirekte Referenzierung\nverwendet Adressen zur Datenlokalisierung.
note left of Address : Jede Adresse verweist auf\neine Datenstelle.

@enduml

@startuml "Memory Management in mDm"
!theme plain
title Speicherstruktur und -verwaltung in mDm

class VirtualMemory {
    +vector<MemoryContent> content
}

class MemoryContent {
    -dNib nib
    -variant<_> content
}

class dNib {
    {field} Undefined
    {field} Address
    {field} EndOfType
    {field} Lock
}

class Content {
    {field} contentbits
}

VirtualMemory --> MemoryContent : beinhaltet
MemoryContent --> dNib : verwendet
MemoryContent --> Content : verwendet

note right of VirtualMemory : VirtualMemory verwaltet\nden gesamten Speicherinhalt.
note right of MemoryContent : MemoryContent repräsentiert\neine Speicherstelle mit\nTypinformation (dNib) und Inhalt.
note right of dNib : dNib kodiert Typinformationen\nfür MemoryContent. 4 Bit lang.
note right of Content : Content kodiert beliebigen Inhalt\n(registerbreite minus 4 Bit) lang.
@enduml

@startuml "Data Addressing and Structure in mDm"
!theme plain
title Datenadressierung und -struktur in mDm

class Address {
    +dNib addressIndicator
    +Address toData
}

class Data {
    +dNib dataIndicator
    +Content dataContent
}

Address "1" -right-> "n" Data : verweist auf

note left of Address : Adressindikator zeigt auf\ndie Daten.
note right of Data : Dateninhalt neben\ndem dNib.

@enduml




@startuml "dSeq_1"
skinparam monochrome true

rectangle "dSeq (direct sequence)"{
    rectangle "Input" 
    rectangle "Process"
    rectangle "Output" 
}

Input -right-> Process
Process -right-> Output
@enduml

@startuml "dSeq_2"
skinparam monochrome true

rectangle "dSeq (direct sequence)"{

    rectangle "dSeq as Input" as i1{
        rectangle "Input" 
        rectangle "Process"
        rectangle "Output" 
    }
    Input -right-> Process
    Process -right-> Output
    rectangle "Process" as p1
    rectangle "Output" as o1
}
i1 -right--> p1
p1 -right--> o1
@enduml


@startuml "Memory"
!theme plain

class VirtualMemory {
    +vector<MemoryContent> content
}

class MemoryContent {
    -dNib nib
    -variant<_> content
}

class dNib {
    {field} Undefined
    {field} Address
    {field} EndOfType
    {field} Lock
}

class content {
    {field} contentbits
}

VirtualMemory --> MemoryContent : contains
MemoryContent --> dNib : uses
MemoryContent --> content : uses

note right of VirtualMemory : VirtualMemory verwaltet\nden gesamten Speicherinhalt.

note right of MemoryContent : MemoryContent repräsentiert\neine Speicherstelle mit\nTypinformation (dNib) und Inhalt.\nTypeninformationen müssen vorher implementiert sein.

note right of dNib : dNib kodiert Typinformationen\nfür MemoryContent. 4 Bit lang.

note right of content : content kodiert beliebigen Inhalt\n(registerbreite minus 4 Bit) lang.
@enduml

'```graphiz
'digraph G {
'    node [shape=record, fontsize=12];

'    address [label="{dNib (als Adresse) | Adresse zu Daten}"];
'    data1 [label="{Daten (28 Bit) | char: 'A'}"];
'    data2 [label="{Daten (28 Bit) | numerical: 1234}"];
'    data3 [label="{Daten (28 Bit) | Adresse zu weiteren Daten}"];
'    string [label="... | char[n]: '!'"];

'    address -> data1;
'    address -> data2;
'    data3 -> string;
'}
'```

@startuml
!theme plain
title Direkte Referenzierung mit dNibs

class DirectReference {
    +dNib metadata
    +data content
}

note right of DirectReference : Direkte Referenzierung\nspeichert Daten neben dem dNib.

DirectReference : metadata = "Typinformation"
DirectReference : content = "Daten (28 Bit)"
@enduml

@startuml
!theme plain
title Indirekte Referenzierung (Liste) mit dNibs

class IndirectReference {
    +dNib listPointer
    +list<Address> addresses
}

class Address {
    +dNib metadata
    +data content
}

IndirectReference --> Address : enthält

note right of IndirectReference : Indirekte Referenzierung\nverwendet Adressen zur Datenlokalisierung.
note left of Address : Jede Adresse verweist auf\neine Datenstelle.
@enduml

@startuml
!theme plain
title Speicherstruktur und -verwaltung in mDm

class VirtualMemory {
    +vector<MemoryContent> content
}

class MemoryContent {
    -dNib nib
    -variant<_> content
}

class dNib {
    {field} Undefined
    {field} Address
    {field} EndOfType
    {field} Lock
}

class Content {
    {field} contentbits
}

VirtualMemory --> MemoryContent : beinhaltet
MemoryContent --> dNib : verwendet
MemoryContent --> Content : verwendet

note right of VirtualMemory : VirtualMemory verwaltet\nden gesamten Speicherinhalt.
note right of MemoryContent : MemoryContent repräsentiert\neine Speicherstelle mit\nTypinformation (dNib) und Inhalt.
note right of dNib : dNib kodiert Typinformationen\nfür MemoryContent. 4 Bit lang.
note right of Content : Content kodiert beliebigen Inhalt\n(registerbreite minus 4 Bit) lang.
@enduml

@startuml
!theme plain
title Datenadressierung und -struktur in mDm

class Address {
    +dNib addressIndicator
    +Address toData
}

class Data {
    +dNib dataIndicator
    +Content dataContent
}

Address "1" -right-> "n" Data : verweist auf

note left of Address : Adressindikator zeigt auf\ndie Daten.
note right of Data : Dateninhalt neben\ndem dNib.
@enduml

@startuml "dNibs"
class "Memory" {
  -dNib: 2 Bits
  -Data: Byte
}

note "Memory"
  The dNib controls:
  - Data or Address (1 bit)
  - End marker (1 bit)
end note

"Memory" -> "Memory" : Self Reference for Sequential Access

note "Memory Layout" 
  Each byte of memory is divided into:
  - 2 bits for dNib
  - Remaining bits for data
end note

"Memory" -down-> "Memory Layout"
@enduml