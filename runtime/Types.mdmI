/// Implementation beschreibt das wie
/// innerhalb der klammer ( ),  ist ';' eine aufzählung und ',' eine auswahl
/// input sind die bezeichner (nach der vorherigen typdefinition)
/// 'is' ist ein schlüsselwort/parocessing zur wertezuweisung des outputs 
(bit_in), ((bit_in), is ), bit
(bit_in), ( (bit_in), is  ), bool /// (0, 1)
(bool_in), ( (bool_in), is  ), dNib /// (bool)
(dNib), ( (0), is ), address /// (0)
(dNib), ( (1), is ), data /// (1)
(dNib), ( (0), is ), concat_content /// (0)
(dNib), ( (1), is ), endof_content /// (1)
(signchar_in), ( (signchar_in;'-'), eq ), signbit /// (bool)

(first;second), ( (<uint12>first,second),is ), fraction6

(is_data; is_end; bit_1; bit_2; bit_3; bit_4; bit_5; bit_6), ( 
    ( (1; ((is_data;is_end),and)) , eq)
 ( (((((( ((((( 
    (2;( ((( bit_1; 1), and); 0), mul)), pow  );
    ( (2;( ((( bit_2; 1), and); 1), mul)), pow  ) ), add);
    ( (2;( ((( bit_3; 1), and); 2), mul)), pow  ) ), add);
    ( (2;( ((( bit_4; 1), and); 3), mul)), pow  ) ), add);
    ( (2;( ((( bit_5; 1), and); 4), mul)), pow  ) ), add);
    ( (2;( ((( bit_6; 1), and); 5), mul)), pow  ) ), add);
    ), is
  ),uint6


/// fehlt noch ...
(data; concat_content; signbit; bit; bit; bit; bit; bit; data; endof_content; bit; bit; bit; bit; bit; bit), float10, (_)
(data; endof_content; bit; bit; bit; bit; bit; bit), char6, (_)

(data; endof_content; signbit; bit; bit; bit; bit; bit), sint5, (_)
(data; concat_content; bit; bit; bit; bit; bit; bit; data; endof_content; bit; bit; bit; bit; bit; bit), char12, (_)
/// anpassen:
///    Bereich 0x0000 bis 0x0077: Standard ASCII-Zeichensatz
///    Bereich 0x0080 bis 0x00F7: Latin-1 Supplement (ähnlich ISO 8859-1)
///    Bereich 0x0100 bis 0x0177: Erweitertes lateinisches Alphabet (z.B. europäische Akzentzeichen)
///    Bereich 0x0180 bis 0x0247: Weitere lateinische Zeichensätze, inklusive nicht-westlicher und dekorativer Zeichen
///    Bereich 0x0250 bis 0x02A7: IPA-Erweiterungen für phonetische Schreibweisen
///    
/// Listen-Deklaration:
/// Für eine Liste, die Elemente eines bestimmten Typs bis zu einer maximalen Länge von 26=6426=64 Elementen enthält. Das 'end'-dNib kodiert das letzte Element der Liste:
(type), list6<type>, (_)
/// Hierbei ist type der Elementtyp der Liste, und list6<type> definiert eine Liste dieses Typs, wobei das Ende der Liste durch ein spezielles dNib markiert wird.
/// Überladungen für verschiedene Typen:
/// Um verschiedene Typen in Listen zu unterstützen und sie voneinander zu unterscheiden, könnten Typspezifikationen wie folgt verwendet werden:
(char6), list6<char6>, (_)
(uint6), list6<uint6>, (_)
/// Diese Definitionen erlauben es, Listen mit char6 oder uint6 Elementen zu deklarieren, wobei klar ist, welche Art von Elementen die Liste enthält.
/// Erweiterung für größere Listen:
/// Für Listen, die mehr Elemente enthalten können (z.B. bis zu 212212 Elemente), könnte eine entsprechende Typdefinition eingeführt werden:
(type), list12<type>, (_)
/// Und analog für verschiedene Typüberladungen:
(char12), list12<char12>, (_)
(uint12), list12<uint12>, (_)
/// Durch die Einführung von Typüberladungen können Listen unterschiedlicher Elementtypen klar unterschieden und entsprechend manipuliert werden, was eine flexible und typsichere Handhabung von Sammlungen in mDm ermöglicht. Die Verwendung generischer Typen wie list6<type> und list12<type> erhöht die Wiederverwendbarkeit und Anpassungsfähigkeit der Listenstrukturen an verschiedene Anwendungsfälle.
/// Um eine Typ-Enumeration namens type6 zu definieren, die bis zu 26=6426=64 verschiedene Datentypen mit einer Bitbreite von 6 Bits unterstützt, beginnen wir mit der Zuweisung von eindeutigen Identifikatoren zu jedem der zuvor besprochenen Datentypen. Anschließend implementieren wir das typeEnum, das diese Typen repräsentiert.
/// Schritt 1: Definieren der Typ-Identifikatoren
/// Hier ist eine vorläufige Liste der Typ-Identifikatoren für unsere Grunddatentypen. Die tatsächliche Reihenfolge und die zugewiesenen IDs können je nach Anforderungen und Erweiterbarkeit der Sprache angepasst werden:

/// folgendes käme dann als type in die mdmI zur implementierung, incl. if
///     uint6 - 000001
///     sint5 - 000010
///     float10 - 000011
///     bool - 000100
///     char12 - 000101
///     list6<uint6> - 000110
///     list12<uint12> - 000111
///     string - 001000
///     optional<uint6> - 001001
///     enum - 001010
///    ... (weitere Typen können folgen, bis zum Limit von 64 Typen)
