/// an integer
0, int, myInteger

/// a string
"Hello, mDm!", string, myString

/// a bool
true, bool, myBool

/// allokated list
(1;2;3;4;5), list, myList

/// liste mit definierter größe (5) und unbekanntem inhalt (die gesamtgröße ist damit auch unbekannt)
(_;_;_;_;_), list, a

/// liste mit definierter größe (5) und bekanntem inhalt (die gesamtgröße ist unbekannt, kann aber mit int angenommen werden)
(1;2;3;4;5), list, b

/// liste mit definierter größe (5) und bekanntem inhalt (die gesamtgröße ist vollumfänglich definiert 5* int)
((1,int,_);(2,int,_);(3,int,_);(4,int,_);(5,int,_)), list, c

/// liste mit definierter größe (3) und bekanntem inhalt (die gesamtgröße ist vollumfänglich definiert 1* int + 1*char + 1*string)
((1,int,_);("2",char,_);("345",string,_)), list, d

/// liste mit definierter größe (3) und bekanntem inhalt (die gesamtgröße ist vollumfänglich definiert 1* int + 1*char + 1*string), listenelemente haben einen ausgabebezeichner. listenelemente sind durch e:::id oder e:::name direkt ansprechbar und sind damit einem struct oder onion in c/c++ ähnlich
((1,int,id);("2",char,amount);("345",string,name)), list, e

/// struct like type
((1,int,id);("2",char,amount);("345",string,name)), list, myComplexType

/// Char 'A', ASCII-Code 65, in 28 Bit codiert, dNib markiert als 'char' mit EndOfType
(dNib::CharEndOfType, 65), charValue, memoryLocation

/// Liste mit den Werten 1, 2, 3; jedes Element hat ein dNib, EndOfType am Ende der Liste
(dNib::Numerical, 1), numericalValue1, listStart
(dNib::Numerical, 2), numericalValue2, nextLocation
(dNib::NumericalEndOfType, 3), numericalValue3, endOfList


// Adresse, die auf den Speicherort von 'A' zeigt
(dNib::Address, AdresseZuA), charPointer, SpeicherortPointer
// Direkte Speicherung von 'A' an der Adresse
(AddressZuA, 'A'), charValue, AdresseZuA

// Adresse, die auf den Speicherort von 1234 zeigt
(dNib::Address, AdresseZu1234), numericalPointer, SpeicherortPointer
// Speicherung von 1234
(AdresseZu1234, 1234), numericalValue, AdresseZu1234

// String als Kette von Adressen, die auf 'H', 'i', etc. zeigen
(dNib::Address, AdresseZuH), stringStart, SpeicherortString
(AdresseZuH, 'H'), charValueH, AdresseZuH
// Weitere Adressen und Char-Werte folgen...

