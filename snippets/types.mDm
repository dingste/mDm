/// an integer
0, int, myInteger

/// a string
"Hello, mDm!", string, myString

/// a bool
true, bool, myBool

/// allokated list
(1;2;3;4;5), list, myList

/// liste mit definierter größe (5) und unbekanntem inhalt (die gesamtgröße ist damit auch unbekannt)
(_;_;_;_;_), list, a

/// liste mit definierter größe (5) und bekanntem inhalt (die gesamtgröße ist unbekannt, kann aber mit int angenommen werden)
(1;2;3;4;5), list, b

/// liste mit definierter größe (5) und bekanntem inhalt (die gesamtgröße ist vollumfänglich definiert 5* int)
((1,int,_);(2,int,_);(3,int,_);(4,int,_);(5,int,_)), list, c

/// liste mit definierter größe (3) und bekanntem inhalt (die gesamtgröße ist vollumfänglich definiert 1* int + 1*char + 1*string)
((1,int,_);("2",char,_);("345",string,_)), list, d

/// liste mit definierter größe (3) und bekanntem inhalt (die gesamtgröße ist vollumfänglich definiert 1* int + 1*char + 1*string), listenelemente haben einen ausgabebezeichner. listenelemente sind durch e:::id oder e:::name direkt ansprechbar und sind damit einem struct oder onion in c/c++ ähnlich
((1,int,id);("2",char,amount);("345",string,name)), list, e

/// struct like type
((1,int,id);("2",char,amount);("345",string,name)), list, myComplexType